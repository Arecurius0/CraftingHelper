// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using CraftingHelper;
//
//    var modifier = Modifier.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace CraftingHelper.Modifier
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class Modifier
    {
        [JsonPropertyName("id_modifier")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdModifier { get; set; }

        [JsonPropertyName("modgroup")]
        public string Modgroup { get; set; }

        [JsonPropertyName("modgroups")]
        public string Modgroups { get; set; }

        [JsonPropertyName("affix")]
        public Affix Affix { get; set; }

        [JsonPropertyName("id_mgroup")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdMgroup { get; set; }

        [JsonPropertyName("name_modifier")]
        public string NameModifier { get; set; }

        [JsonPropertyName("id_fossil")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? IdFossil { get; set; }

        [JsonPropertyName("mtypes")]
        public string Mtypes { get; set; }

        [JsonPropertyName("meta")]
        public string Meta { get; set; }

        [JsonPropertyName("mtags")]
        public Mtags? Mtags { get; set; }

        [JsonPropertyName("hybrid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Hybrid { get; set; }

        [JsonPropertyName("notable")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Notable { get; set; }

        [JsonPropertyName("vex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Vex { get; set; }

        [JsonPropertyName("amg")]
        public string Amg { get; set; }

        [JsonPropertyName("exkey")]
        public string Exkey { get; set; }

        [JsonPropertyName("ubt")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Ubt { get; set; }

        [JsonPropertyName("hr")]
        public bool Hr { get; set; }

        [JsonPropertyName("ha")]
        public bool Ha { get; set; }
    }

    public enum Affix { Corrupted, EldritchBlue, EldritchRed, Prefix, Suffix };

    public enum Mtags { Attack, Caster, Empty };

    public partial class Modifier
    {
        public static Modifier[] FromJson(string json) => JsonSerializer.Deserialize<Modifier[]>(json, CraftingHelper.Modifier.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Modifier[] self) => JsonSerializer.Serialize(self, CraftingHelper.Config.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                AffixConverter.Singleton,
                MtagsConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class AffixConverter : JsonConverter<Affix>
    {
        public override bool CanConvert(Type t) => t == typeof(Affix);

        public override Affix Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "corrupted":
                    return Affix.Corrupted;
                case "eldritch_blue":
                    return Affix.EldritchBlue;
                case "eldritch_red":
                    return Affix.EldritchRed;
                case "prefix":
                    return Affix.Prefix;
                case "suffix":
                    return Affix.Suffix;
            }
            throw new Exception("Cannot unmarshal type Affix");
        }

        public override void Write(Utf8JsonWriter writer, Affix value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Affix.Corrupted:
                    JsonSerializer.Serialize(writer, "corrupted", options);
                    return;
                case Affix.EldritchBlue:
                    JsonSerializer.Serialize(writer, "eldritch_blue", options);
                    return;
                case Affix.EldritchRed:
                    JsonSerializer.Serialize(writer, "eldritch_red", options);
                    return;
                case Affix.Prefix:
                    JsonSerializer.Serialize(writer, "prefix", options);
                    return;
                case Affix.Suffix:
                    JsonSerializer.Serialize(writer, "suffix", options);
                    return;
            }
            throw new Exception("Cannot marshal type Affix");
        }

        public static readonly AffixConverter Singleton = new AffixConverter();
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class MtagsConverter : JsonConverter<Mtags>
    {
        public override bool CanConvert(Type t) => t == typeof(Mtags);

        public override Mtags Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "":
                    return Mtags.Empty;
                case "attack":
                    return Mtags.Attack;
                case "caster":
                    return Mtags.Caster;
            }
            throw new Exception("Cannot unmarshal type Mtags");
        }

        public override void Write(Utf8JsonWriter writer, Mtags value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Mtags.Empty:
                    JsonSerializer.Serialize(writer, "", options);
                    return;
                case Mtags.Attack:
                    JsonSerializer.Serialize(writer, "attack", options);
                    return;
                case Mtags.Caster:
                    JsonSerializer.Serialize(writer, "caster", options);
                    return;
            }
            throw new Exception("Cannot marshal type Mtags");
        }

        public static readonly MtagsConverter Singleton = new MtagsConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
